@page "/employees"
@inject IHttpClientFactory HttpClientFactory
@inject IWebAssemblyHostEnvironment Env
@attribute [Authorize]

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

<p>This component demonstrates fetching data from the server.</p>

<div class="d-flex align-items-center gap-2">
    <input type="text" @bind="searchText" class="form-control" placeholder="Inserisci la chiave" style="max-width: 200px;" />
    
    <i class="bi bi-search pointer" @onclick="() => GetEmployees()" style="cursor: pointer; font-size: 1.2rem;"></i>
    
    <InputSelect class="form-select w-auto" @bind-Value="searchConfigId">
        <option value="">Seleziona...</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>		
    </InputSelect>	
</div>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Score</th>
				<th>Last Name</th>
				<th>First Name</th>
				<th>Title</th>
				<th>Title of Courtesy</th>
				<th>Birth Date</th>
				<th>Hire Date</th>
				<th>Address</th>
				<th>City</th>
				<th>Region</th>
				<th>Postal Code</th>
				<th>Country</th>
				<th>Home Phone</th>
				<th>Extension</th>
				<th>Photo</th>				
				<th>Reports To</th>
				@* <th>Photo Path</th> *@
			</tr>
		</thead>
		<tbody>
			@foreach (var employee in employees)
			{
				<tr>
					<td>@employee.Id</td>
					<td>@(employee.Score?.ToString("F4") ?? "")</td>
					<td>@employee.LastName</td>
					<td>@employee.FirstName</td>
					<td>@employee.Title</td>
					<td>@employee.TitleOfCourtesy</td>
					<td>@employee.BirthDate</td>
					<td>@employee.HireDate</td>
					<td>@employee.Address</td>
					<td>@employee.City</td>
					<td>@employee.Region</td>
					<td>@employee.PostalCode</td>
					<td>@employee.Country</td>
					<td>@employee.HomePhone</td>
					<td>@employee.Extension</td>
					<td>@(employee.Photo != null ? "Yes" : "No")</td>					
					<td>@employee.ReportsTo</td>
					@* <td>@employee.PhotoPath</td> *@
				</tr>
				<tr>
					Notes: <td colspan="17">@employee.Notes</td>
				</tr>
				<tr>
					Answer: <td colspan="17">@employee.Answer</td>
				</tr>				
			}
		</tbody>
	</table>
}

@code {
    private Employee[]? employees;
	private string? searchText;
	private string? searchConfigId;
	

    protected override async Task OnInitializedAsync()
    {
		await GetEmployees();			
    }

	async Task GetEmployees()
    {
				// Costruisce la query string in base ai parametri forniti
		var query = new List<string>();		
		if (!string.IsNullOrEmpty(searchConfigId)) query.Add($"searchConfigId={Uri.EscapeDataString(searchConfigId)}");
		if (!string.IsNullOrEmpty(searchText)) query.Add($"searchText={Uri.EscapeDataString(searchText)}");

		var queryString = query.Count > 0 ? "?" + string.Join("&", query) : string.Empty;

		using var http = HttpClientFactory.CreateClient("api");
		employees = await http.GetFromJsonAsync<Employee[]>($"employees{queryString}");			
    }
}

