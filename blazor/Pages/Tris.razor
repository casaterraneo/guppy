@page "/tris"
@attribute [Authorize]

@implements IAsyncDisposable

@inject IHttpClientFactory HttpClientFactory
@inject IWebAssemblyHostEnvironment Env

@using System.Linq
@using System.Net.WebSockets
@using System.Text
@using System.Security.Claims
@using Blazor.Papi
@using System.Text.Json

<PageTitle>Tris</PageTitle>

<h3 class="mb-4">Tris</h3>

<div class="mb-3">
    <button class="btn btn-primary mt-2" 
        @onclick="async () => await Start()">Inizia Partita
    </button>
</div>

<div class="mb-3">
    <label for="gameIdInput" class="form-label">Game ID</label>
    <input id="gameIdInput" class="form-control" @bind="gameIdToClear" placeholder="Inserisci Game ID" />
</div>

<div class="mb-3">
    <button class="btn btn-primary mt-2" 
        @onclick="async () => await ClearDo()">Clear Do
    </button>
</div>

@if (game != null)
{
    <div class="mb-12">
        <span class="badge bg-primary me-2">GameId: @game.GameId</span>

        @foreach (var player in game.PlayerList)
        {
            <span class="me-2">Player: @player.Name</span>
        }

        @if (!string.IsNullOrWhiteSpace(GetCurrentPlayer()))
        {
            <span class="me-2">Current player: @GetCurrentPlayer()</span>
        }
        @if (!string.IsNullOrWhiteSpace(@GetTurn()))
        {
            <span class="me-2">Current turn: @GetTurn()</span>
        }    
    </div>

    <div class="mb-6">
        <span>Item list: @string.Join(", ", game.ItemList)</span>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-auto">
                <div class="d-grid gap-2">
                    @for (int row = 0; row < 3; row++)
                    {
                        <div class="btn-group">
                            @for (int col = 0; col < 3; col++)
                            {
                                int idx = row * 3 + col;
                                <button class="btn btn-outline-primary btn-lg"
                                        style="width: 70px; height: 70px; font-size:2rem;"
                                        disabled="@(!string.IsNullOrEmpty(game.Board[idx]) 
                                                    || !IsMyTurn())"
                                        @onclick="async () => await MakeMove(idx)">
                                    @game.Board[idx]
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="row mt-4 justify-content-center">
            <div class="col-auto">
                @if (game.Phase == Game.GamePhase.End)
                {
                    <div class="alert alert-success">
                        @game.GameResult
                    </div>
                }
                <button class="btn btn-secondary mt-2" @onclick="Reset">Reset</button>
            </div>
        </div>
    </div>
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }   

    //enum GameState { Idle, Searching, Playing }     
    //GameState gameState = GameState.Idle;    
    string userName  = "";    
    Game game = null;    
    string gameResult = string.Empty;
    string _uri = string.Empty;
    private ClientWebSocket _webSocket;
    private CancellationTokenSource _cts;
    private string gameIdToClear = string.Empty;

    private async Task ClearDo()
    {
        using var http = HttpClientFactory.CreateClient("api");
        var clearResult = await http?.GetFromJsonAsync<string>($"tris/clearDo/{Uri.EscapeDataString(gameIdToClear)}");

        StateHasChanged();
    }

    //rename play game, is possible to reconnect to game already started?
    private async Task Start()
    {
        using var http = HttpClientFactory.CreateClient("api");
        game = await http?.GetFromJsonAsync<Game>($"tris/{userName}");

        await ConnectAsync();
        StateHasChanged();
    }

    private async Task MakeMove(int idx)
    {
        if(game.Phase == Game.GamePhase.End)
            return;

        if (!string.IsNullOrEmpty(game.Board[idx]) 
            || !IsMyTurn())
            return;        

        //var symbol = GetTurn();        
        var symbol = game.ItemList[0];
        //simula la mossa dalla scatola alla board
        game.ItemList.RemoveAt(0);
        game.Board[idx] = symbol;

        //se il gioco non Ã¨ local? come faccio a ricaricare la partita per
        await SendMessageAsync();

        game.CheckWinOrDraw();

        StateHasChanged();
    }

    private string? GetCurrentPlayer()
    {
        return game.PlayerList.FirstOrDefault(p => p.PlayerId == GetTurn())?.Name;
    }

    private string GetTurn()
    {
        int countX = game.Board.Count(c => c == "X");
        int countO = game.Board.Count(c => c == "O");

        return countX == countO ? "X" : "O";
    }

    private bool IsMyTurn()
    {
        return game.Phase == Game.GamePhase.Start &&
            game.PlayerList.Exists(p => p.PlayerId == GetTurn());
    }

    private async Task Reset()
    {
        game.Board = new string[9];
        gameResult = null;
        await SendMessageAsync();   // Invia il messaggio al server
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationState;
        userName = state?.User?.Identity?.Name;
        if (string.IsNullOrEmpty(userName))
        {
            throw new InvalidOperationException("UserName non trovato.");
        }
    }   

    private async Task ConnectAsync()
    {
        if(_webSocket is null)
        {
            using var http = HttpClientFactory.CreateClient("api");
            var uriBuilder = new UriBuilder(http.BaseAddress)
            {
                Scheme = "wss",
                Port = -1,
            };
            _uri = uriBuilder.Uri.ToString().Replace("/api", "/wstris").TrimEnd('/');            
            _uri = $"{_uri}?gameId={Uri.EscapeDataString(game.GameId)}";

            _webSocket = new ClientWebSocket();
            _cts = new CancellationTokenSource();
        }

        if (_webSocket.State == WebSocketState.Closed 
            || _webSocket.State == WebSocketState.Aborted 
            || _webSocket.State == WebSocketState.None)
        {
            _webSocket = new ClientWebSocket();
            _cts = new CancellationTokenSource();
        }        
        if (_webSocket.State != WebSocketState.Open)
        {
            await _webSocket.ConnectAsync(new Uri(_uri), _cts.Token);
            _ = ReceiveLoopAsync();
        }
    }

    private async Task ReceiveLoopAsync()
    {        
        var buffer = new byte[1024];
        try
        {
            while (_webSocket.State == WebSocketState.Open && !_cts.IsCancellationRequested)
            {                
                var result = await _webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), _cts.Token);             
                var text = Encoding.UTF8.GetString(buffer, 0, result.Count);   

                if(string.IsNullOrWhiteSpace(text)) 
                    continue; 

                Game game = JsonSerializer.Deserialize<Game>(text);
                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
            // Chiusura attesa, non loggiamo
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errore ReceiveLoop: {ex.Message}");
        }
    }

    private async Task SendMessageAsync()
    {       
        if (_webSocket.State == WebSocketState.Open)
        {
            string json = JsonSerializer.Serialize(game);
            var bytes = Encoding.UTF8.GetBytes(json);
            await _webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, _cts.Token);            
        }
    }

    private async Task CloseAsync()
    {       
        if (_webSocket is not null && _webSocket.State == WebSocketState.Open)
        {            
            await _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Chiusura client", CancellationToken.None);     
            _cts.Cancel();  // Fa terminare ReceiveLoop
        }       
    }

    public async ValueTask DisposeAsync()    
    {       
        await CloseAsync();             
        _webSocket?.Dispose();         
        _cts?.Dispose();     
    }

}
