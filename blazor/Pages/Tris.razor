@page "/tris"

@using System.Text
@attribute [Authorize]

<h3 class="text-center mb-4">Tris</h3>

<div class="container text-center">
    <div class="board">
        @for (int i = 0; i < 9; i++)
        {
            <button class="btn btn-outline-primary cell"
                    @onclick="() => MakeMove(i)">
                @board[i]
            </button>
        }
    </div>
    <div class="mt-4">
        <h5>@status</h5>
        <button class="btn btn-secondary mt-2" @onclick="Reset">Reset</button>
    </div>
</div>

@code {
    private string[] board = new string[9];
    private string currentPlayer = "X";
    private string status = "Turno di X";
    private bool gameEnded = false;

    private void MakeMove(int index)
    {
        // Protezione contro indici fuori limite
        if (index < 0 || index >= board.Length)
        {
            return;
        }

        if (!string.IsNullOrWhiteSpace(board[index]) || gameEnded)
            return;

        board[index] = currentPlayer;

        if (CheckWinner())
        {
            status = $"Vince {currentPlayer}!";
            gameEnded = true;
        }
        else if (board.All(cell => !string.IsNullOrWhiteSpace(cell)))
        {
            status = "Pareggio!";
            gameEnded = true;
        }
        else
        {
            currentPlayer = (currentPlayer == "X") ? "O" : "X";
            status = $"Turno di {currentPlayer}";
        }
    }

    private bool CheckWinner()
    {
        int[][] winningCombos = new int[][]
        {
            new[] {0,1,2}, new[] {3,4,5}, new[] {6,7,8},  // righe
            new[] {0,3,6}, new[] {1,4,7}, new[] {2,5,8},  // colonne
            new[] {0,4,8}, new[] {2,4,6}                  // diagonali
        };

        foreach (var combo in winningCombos)
        {
            var a = combo[0];
            var b = combo[1];
            var c = combo[2];

            // Protezione aggiuntiva, anche se i combo sono statici
            if (a < 0 || a >= board.Length || b < 0 || b >= board.Length || c < 0 || c >= board.Length)
                continue;

            if (!string.IsNullOrWhiteSpace(board[a]) &&
                board[a] == board[b] &&
                board[b] == board[c])
            {
                return true;
            }
        }
        return false;
    }

    private void Reset()
    {
        board = new string[9];
        currentPlayer = "X";
        status = "Turno di X";
        gameEnded = false;
    }
}