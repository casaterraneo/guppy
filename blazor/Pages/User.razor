@page "/user"
@attribute [Authorize]
@using System.Text.Json
@using System.Security.Claims
@using System.Net.Http.Headers
@inject IAccessTokenProvider AuthorizationService
@inject IHttpClientFactory HttpClientFactory

<h1>@AuthenticatedUser?.Identity?.Name</h1>

https://learn.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/standalone-with-authentication-library?view=aspnetcore-3.1&tabs=visual-studio

<h2>Claims</h2>

@foreach (var claim in AuthenticatedUser?.Claims ?? Array.Empty<Claim>())
{
    <p class="claim">@(claim.Type): @claim.Value</p>
}

<h2>Access token</h2>

<p id="access-token">@AccessToken?.Value</p>

<h2>Access token claims</h2>

@foreach (var claim in GetAccessTokenClaims())
{
    <p>@(claim.Key): @claim.Value.ToString()</p>
}

@if (AccessToken != null)
{
    <h2>Access token expires</h2>

    <p>Current time: <span id="current-time">@DateTimeOffset.Now</span></p>
    <p id="access-token-expires">@AccessToken.Expires</p>

    <h2>Access token granted scopes (as reported by the API)</h2>

    @foreach (var scope in AccessToken.GrantedScopes)
    {
        <p>Scope: @scope</p>
    }
}

@if (GuppyUser is null)
{
    <p>Loading...</p>
}
else
{
    <GuppyUserComponent User="GuppyUser" />
    <div>Update User</div>

    <div>
        <label class="form-label">Favorite olor:</label>
        <input type="text" class="form-control" placeholder="Enter value" @bind="favoriteColor"  />
    </div>

    <button type="button" class="btn" @onclick="UpdateMetadata">Update Metadata</button>    
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    public ClaimsPrincipal AuthenticatedUser { get; set; }
    public AccessToken AccessToken { get; set; }    
    private string favoriteColor { get; set; }
    private string StatusMessage { get; set; }    
    private GuppyUser GuppyUser { get; set; }    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException("Failed to provision the access token.");
        }

        AccessToken = token;

        AuthenticatedUser = state.User;
        await GetUser();
        favoriteColor = GuppyUser?.user_metadata?.favorite_color;
    }

	async Task GetUser()
    {		
        string userId = "auth0|65d875633cd5642ab64694e9";
		using var http = HttpClientFactory.CreateClient("api");
		GuppyUser = await http.GetFromJsonAsync<GuppyUser>($"users/{userId}");
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
           return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(
            Convert.FromBase64String(base64Payload));
    }
    public async Task UpdateMetadata()
    {        
        GuppyUser.user_metadata.favorite_color = favoriteColor;
        var payload = new
        {
            user_metadata = GuppyUser.user_metadata
        };
		using var http = HttpClientFactory.CreateClient("api");
		var response = await http.PatchAsJsonAsync($"users/{GuppyUser.user_id}", new { user_metadata = payload });
        response.EnsureSuccessStatusCode();     
    }   
}