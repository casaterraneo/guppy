@page "/user"
@attribute [Authorize]
@using System.Text.Json
@using System.Security.Claims
@using System.Net.Http.Headers
@inject IAccessTokenProvider AuthorizationService
@inject IHttpClientFactory HttpClientFactory

<h1>@AuthenticatedUser?.Identity?.Name</h1>

https://learn.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/standalone-with-authentication-library?view=aspnetcore-3.1&tabs=visual-studio

<h2>Claims</h2>

@foreach (var claim in AuthenticatedUser?.Claims ?? Array.Empty<Claim>())
{
    <p class="claim">@(claim.Type): @claim.Value</p>
}

<h2>Access token</h2>

<p id="access-token">@AccessToken?.Value</p>

<h2>Access token claims</h2>

@foreach (var claim in GetAccessTokenClaims())
{
    <p>@(claim.Key): @claim.Value.ToString()</p>
}

@if (AccessToken != null)
{
    <h2>Access token expires</h2>

    <p>Current time: <span id="current-time">@DateTimeOffset.Now</span></p>
    <p id="access-token-expires">@AccessToken.Expires</p>

    <h2>Access token granted scopes (as reported by the API)</h2>

    @foreach (var scope in AccessToken.GrantedScopes)
    {
        <p>Scope: @scope</p>
    }
}

<h3>Update User Metadata</h3>

<div>
    <label class="form-label">Key:</label>
    <input type="text" class="form-control" @bind="Key" placeholder="Enter key" />
</div>
<div>
    <label class="form-label">Value:</label>
    <input type="text" class="form-control" @bind="Value" placeholder="Enter value" />
</div>

<button type="button" class="btn" @onclick="UpdateMetadata">Update Metadata</button>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <p>@StatusMessage</p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public ClaimsPrincipal AuthenticatedUser { get; set; }
    public AccessToken AccessToken { get; set; }
    private string Key { get; set; }
    private string Value { get; set; }
    private string StatusMessage { get; set; }    
    private GuppyUser GuppyUser { get; set; }    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();
        //var accessTokenResult = await TokenProvider.RequestAccessToken(
        //    new AccessTokenRequestOptions
        //    {
        //        Scopes = new[] { "https://myapi.example.com"}
        //    });        

        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException(
                "Failed to provision the access token.");
        }

        AccessToken = token;

        AuthenticatedUser = state.User;
        await GetUser();
    }

	async Task GetUser()
    {		
        string userId = "auth0|65d875633cd5642ab64694e9";
		using var http = HttpClientFactory.CreateClient("api");
		GuppyUser = await http.GetFromJsonAsync<GuppyUser>($"users/{userId}");
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
           return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(
            Convert.FromBase64String(base64Payload));
    }

    private async Task UpdateMetadata()
    {
        try
        {
            string userId = "auth0|65d875633cd5642ab64694e9";  // Sostituisci con l'ID dell'utente da aggiornare
            string authToken = AccessToken?.Value;  // Sostituisci con un token valido
            
            // Chiama il metodo UpdateUserMetadataAsync
            await UpdateUserMetadataAsync(userId, authToken, Key, Value);
            StatusMessage = "User metadata updated successfully!";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error updating metadata: {ex.Message}";
        }
    }

    public async Task UpdateUserMetadataAsync(string userId, string authToken, string key, string value)
    {
        var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);

        var url = $"https://dev-lnkfyfu1two0vaem.us.auth0.com/api/v2/users/{userId}";
        
        // Usare un dizionario per i dati user_metadata
        var data = new
        {
            user_metadata = new Dictionary<string, string> { { key, value } }
        };
        
        var content = new StringContent(JsonSerializer.Serialize(data), System.Text.Encoding.UTF8, "application/json");

        var response = await client.PatchAsync(url, content);
        response.EnsureSuccessStatusCode();
    }   
}