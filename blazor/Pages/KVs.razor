@page "/kvs"
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>KVs</PageTitle>

<h1>KVs</h1>

<p>This component demonstrates fetching KV data from and to the server.</p>

@if (kvs == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th></th>
				<th>Key</th>
				<th>Value</th>
				<th></th>
			</tr>
			<tr>
				<th><i class="bi bi-plus-lg pointer" @onclick ="() => PostAsync()"></i></th>
				<th><input type="text" @bind="currentKey" placeholder="Inserisci la chiave" /></th>
				<th><input type="text" @bind="currentValue" placeholder="Inserisci il valore" /></th>
				<th></th>
			</tr>	
			<tr>
				<th>file</th>
				<th colspan="2"><InputFile OnChange="OnInputFileChange" /></th>
				<th></th>
			</tr>					
		</thead>
		<tbody>
			@foreach (var kv in kvs)
			{
				<tr>
					<td><i class="bi bi-pencil pointer"></i></td>
					<td>@kv.Key?.Replace(file_prefix, "")?.Replace(string_prefix, "")</td>
					<td>@kv.Value</td>
					<td><i class="bi bi-trash3 pointer" @onclick="() => DeleteAsync(kv.Key)"></i></td>	
				</tr>
			}
		</tbody>
	</table>
}

@code {
    private KV<string>[]? kvs;
	private KV<string>? kv;
	private string? currentKey;
    private string? currentValue;
	private List<IBrowserFile> loadedFiles = new();
	private IBrowserFile? loadedFile;

	const string file_prefix = "f_";
	const string string_prefix = "s_";

    private List<UploadResult> uploadResults = new();
    protected override async Task OnInitializedAsync()
    {
		kvs = await GetFromJsonAsync();
    }

	async Task<KV<string>[]?> GetFromJsonAsync(string? prefix = null, string? limit = null, string? cursor = null)
	{
		// Costruisce la query string in base ai parametri forniti
		var query = new List<string>();
		if (!string.IsNullOrEmpty(prefix)) query.Add($"prefix={Uri.EscapeDataString(prefix)}");
		if (!string.IsNullOrEmpty(limit)) query.Add($"limit={Uri.EscapeDataString(limit)}");
		if (!string.IsNullOrEmpty(cursor)) query.Add($"cursor={Uri.EscapeDataString(cursor)}");

		var queryString = query.Count > 0 ? "?" + string.Join("&", query) : string.Empty;

		// Aggiunge la query string all'URL della richiesta
		return await Http.GetFromJsonAsync<KV<string>[]?>($"kvs{queryString}");
	}

    async Task DeleteAsync(string key)
    {		
		await Http.DeleteAsync($"kv/{key}");
		kvs = await GetFromJsonAsync();
    }

    async Task PostAsync()
    {		
		if(string.IsNullOrEmpty(currentKey)) return;

		var newItem = new KV<string> { Key = $"{string_prefix}{currentKey}", Value = currentValue ?? "" };
		await Http.PostAsJsonAsync<KV<string>>("kv", newItem);
		kvs = await GetFromJsonAsync();
    }	

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file == null) return;

		loadedFile = file;
		using var stream = file.OpenReadStream();
		using var memoryStream = new MemoryStream();
		await stream.CopyToAsync(memoryStream);
		var newItem = new KV<byte[]> { Key = $"{file_prefix}{loadedFile?.Name}" ?? "", Value = memoryStream.ToArray() };
		await Http.PostAsJsonAsync<KV<byte[]>>("kv", newItem);
		kvs = await GetFromJsonAsync();			            		
    }
}