@page "/kvs"
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>KVs</PageTitle>

<h1>KVs</h1>

<p>This component demonstrates fetching KV data from and to the server.</p>

@if (kvs == null)
{
    <p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th></th>
				<th>Key</th>
				<th>Value</th>
				<th></th>
			</tr>
			<tr>
				<th><i class="bi bi-plus-lg pointer" @onclick ="() => PostAsync()"></i></th>
				<th><input type="text" @bind="currentKey" placeholder="Inserisci la chiave" /></th>
				<th><input type="text" @bind="currentValue" placeholder="Inserisci il valore" /></th>
				<th></th>
			</tr>			
		</thead>
		<tbody>
			@foreach (var kv in kvs)
			{
				<tr>
					<td><i class="bi bi-pencil pointer"></i></td>
					<td>@kv.Key</td>
					<td>@kv.Value</td>
					<td><i class="bi bi-trash3 pointer" @onclick="() => DeleteAsync(kv.Key)"></i></td>	
				</tr>
			}
		</tbody>
	</table>
}

@code {
    private KV[]? kvs;
	private KV? kv;
	private string? currentKey;
    private string? currentValue;

    protected override async Task OnInitializedAsync()
    {
		kvs = await GetFromJsonAsync();
    }

    async Task<KV[]?> GetFromJsonAsync()
    {		
		return await Http.GetFromJsonAsync<KV[]?>("kvs");
    }	

    async Task DeleteAsync(string key)
    {		
		await Http.DeleteAsync($"kv/{key}");
		kvs = await GetFromJsonAsync();
    }

    async Task PostAsync()
    {		
		var newItem = new KV { Key = currentKey ?? "", Value = currentValue ?? "" };
		await Http.PostAsJsonAsync<KV>("kv", newItem);
		kvs = await GetFromJsonAsync();
    }	
}