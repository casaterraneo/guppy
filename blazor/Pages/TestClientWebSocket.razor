@page "/testclientwebsocket"
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@implements IAsyncDisposable

@inject IHttpClientFactory HttpClientFactory
@inject IWebAssemblyHostEnvironment Env

@attribute [Authorize]

<h1>Echo test 1</h1>
<h3>State: @_webSocket?.State</h3>

<div>BaseAddress: @Env.BaseAddress</div>
<div>
    Uri: <input type="text" @bind="@_uri" />
</div>
<div>
    Message: <input type="text" @bind="@_message" />
</div> 

<button class="btn btn-info" @onclick="ConnectAsync">Connect</button>
<button class="btn btn-primary" @onclick="SendMessageAsync">SendMessage</button>
<button class="btn btn-secondary" @onclick="CloseAsync">Close</button>

<pre>@_log</pre>

@code {
    //https://gist.github.com/SteveSandersonMS/5aaff6b010b0785075b0a08cc1e40e01
    private ClientWebSocket _webSocket;
    private CancellationTokenSource _cts;
    private Task _receiveTask;
    private string _log = string.Empty;
    private string _message = "Hello, websocket!";
    string _uri;
    //wss://ws.postman-echo.com/raw
    //https://guppy-api-staging.casa-terraneo.workers.dev/
    //wss://guppy-api-staging.casa-terraneo.workers.dev/ws

    protected override async Task OnInitializedAsync()
    {
        using var http = HttpClientFactory.CreateClient("api");
        var uriBuilder = new UriBuilder(http.BaseAddress)
        {
            Scheme = "wss",
            Port = -1
        };
        _uri = uriBuilder.Uri.ToString().Replace("/api", "/ws").TrimEnd('/');

        _webSocket = new ClientWebSocket();
        _cts = new CancellationTokenSource();
    }

    private async Task ConnectAsync()
    {
        _log += $"Start 1 ConnectAsync State: {_webSocket.State}\n";
        if (_webSocket.State == WebSocketState.Closed 
            || _webSocket.State == WebSocketState.Aborted 
            || _webSocket.State == WebSocketState.None)
        {
            _webSocket = new ClientWebSocket();
            _cts = new CancellationTokenSource();
        }        
        _log += $"Start 2 ConnectAsync State: {_webSocket.State}\n";
        if (_webSocket.State != WebSocketState.Open)
        {
            await _webSocket.ConnectAsync(new Uri(_uri), _cts.Token);
            _receiveTask = ReceiveLoopAsync();
        }
        _log += $"End ConnectAsync State: {_webSocket.State}\n";
    }

    private async Task ReceiveLoopAsync()
    {
        _log += $"Start ReceiveLoopAsync State: {_webSocket.State}\n";
        var buffer = new byte[1024];
        try
        {
            while (_webSocket.State == WebSocketState.Open && !_cts.IsCancellationRequested)
            {
                _log += $"Start ReceiveAsync State: {_webSocket.State}\n";
                var result = await _webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), _cts.Token);
               _log += $"End ReceiveAsync State: {_webSocket.State}\n";
                var text = Encoding.UTF8.GetString(buffer, 0, result.Count);
                _log += $"Ricevuto: {text}\n";
                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
            // Chiusura attesa, non loggiamo
        }
        catch (Exception ex)
        {
            _log += $"Errore ReceiveLoop: {ex.Message}\n";
        }
        _log += $"End ReceiveLoopAsync State: {_webSocket.State}\n";
    }

    private async Task SendMessageAsync()
    {
       _log += $"Start SendMessageAsync State: {_webSocket.State}\n";
        if (_webSocket.State == WebSocketState.Open)
        {
            var bytes = Encoding.UTF8.GetBytes(_message);
            await _webSocket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, _cts.Token);
            _log += $"Inviato: {_message}\n";
            _message = string.Empty;
        }
        _log += $"End SendMessageAsync State: {_webSocket.State}\n";
    }

    private async Task CloseAsync()
    {
       _log += $"Start CloseAsync State: {_webSocket.State}\n";
        if (_webSocket.State == WebSocketState.Open)
        {
            //_cts.Cancel();  // Fa terminare ReceiveLoop
            await _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Chiusura client", CancellationToken.None);
            _log += $"State: {_webSocket.State}\n";
            _cts.Cancel();  // Fa terminare ReceiveLoop
        }
       _log += $"End CloseAsync State: {_webSocket.State}\n";
    }

    public async ValueTask DisposeAsync()
    {
       _log += $"Start DisposeAsync State: {_webSocket.State}\n";
        await CloseAsync();             
        _webSocket?.Dispose();         
        _cts?.Dispose();
        _log += $"End DisposeAsync\n";
    }
}