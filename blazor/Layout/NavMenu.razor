@using System.Text.Json
@inject IWebAssemblyHostEnvironment Env
@inject IAccessTokenProvider AuthorizationService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Guppy @Env.Environment?.Substring(0, 3)</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="user">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> User
            </NavLink>
        </div>           
    @if (HasPermission("read:employees"))
    {        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="employees">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Employees
            </NavLink>
        </div>   
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="kvs">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> KVs
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="google-ai">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Google AI
            </NavLink>
        </div>   
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="workers-ai">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Workers AI
            </NavLink>
        </div>   
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="barista-bot">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Barista BOT
            </NavLink>
        </div>  
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="agent">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Agent
            </NavLink>
        </div>                                            
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="agentsupervisor">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Agent Supervisor
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counterdo">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Counter DO
            </NavLink>
        </div>        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="testclientwebsocket">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Test Client Web Socket
            </NavLink>
        </div>   
    }
    @if (HasPermission("game:tris"))
    {       
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tris">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Tris
            </NavLink>
        </div>  
    }          
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private HashSet<string> permissions = new();   
    private Task<AuthenticationState> AuthenticationState { get; set; }    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await AuthenticationState;
        var accessTokenResult = await AuthorizationService.RequestAccessToken();

        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException("Failed to provision the access token.");
        }
        
        @* permissions = GetAccessTokenClaims()
            .Where(claim => claim.Key == "permissions")
            .Select(claim => claim.Value.ToString())
            .ToHashSet()!; *@

        var claims = GetAccessTokenClaims(token);

        if (claims.TryGetValue("permissions", out var value) 
            && value is JsonElement element 
            && element.ValueKind == JsonValueKind.Array)
        {
            permissions = element.EnumerateArray()
                .Select(p => p.GetString())
                .Where(p => !string.IsNullOrEmpty(p))
                .ToHashSet()!;
        }            
    }
    private bool HasPermission(string permission) => permissions.Contains(permission);

    protected IDictionary<string, object> GetAccessTokenClaims(AccessToken accessToken)
    {
        if (accessToken == null)
        {
           return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = accessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer
                .Deserialize<IDictionary<string, object>>(Convert.FromBase64String(base64Payload));
    }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
